1 DESCRIÇÃO
A tabela "tabelas_coeficientes" armazena tabelas de coeficientes utilizadas nos cálculos de TPE, permitindo que valores sejam buscados dinamicamente com base em condições específicas (material, espessura, etc.).
Cada tabela de coeficientes contém uma matriz de dados onde os valores são selecionados conforme parâmetros condicionais definidos.
* Armazena coeficientes variáveis conforme condições (material, espessura, etc.)
* Permite busca dinâmica de valores em fórmulas via função COEF()
* Suporta múltiplos parâmetros condicionais
* Mantém referência à tabela correspondente no SAP (campo tabela_sap)
* Mantém histórico de alterações de coeficientes

2 OBJETIVO

* Centralizar coeficientes técnicos em tabelas configuráveis;
* Permite busca condicional de valores em fórmulas;
* Automatizar busca de coeficientes em fórmulas via função COEF();
* Padronizar valores técnicos (velocidades, taxas, fatores);
* Suporta diferentes combinações de condições;
* Flexibilizar ajustes de coeficientes sem alterar código;
* Integrar com sistema de cálculo de TPE do widget ORBIS.

3 LÓGICA TÉCNICA DE AQUISIÇÃO DE DADOS
Fontes
* Interface administrativa do widget (criação/edição de parâmetros);
* Chamadas de API diretamente (criação/edição de parâmetros).
Script para criar tabela
CREATE TABLE tabelas_coeficientes (
    id INT IDENTITY(1,1) PRIMARY KEY,
    nome NVARCHAR(100) NOT NULL UNIQUE,
    descricao NVARCHAR(MAX),
    parametros_condicao NVARCHAR(MAX) NOT NULL,
    dados_coeficientes NVARCHAR(MAX) NOT NULL,
    tabela_sap NVARCHAR(30),
    ativa BIT DEFAULT 1,
    data_criacao DATETIME2 DEFAULT GETDATE(),
    data_modificacao DATETIME2 DEFAULT GETDATE()
);

-- Índices para performance
CREATE INDEX idx_coeficientes_nome ON tabelas_coeficientes(nome);
CREATE INDEX idx_coeficientes_ativa ON tabelas_coeficientes(ativa);
CREATE INDEX idx_coeficientes_tabela_sap ON tabelas_coeficientes(tabela_sap);

-- Constraints para validar JSON
ALTER TABLE tabelas_coeficientes
ADD CONSTRAINT chk_coeficientes_parametros_json 
CHECK (parametros_condicao IS NULL OR ISJSON(parametros_condicao) = 1);

ALTER TABLE tabelas_coeficientes
ADD CONSTRAINT chk_coeficientes_dados_json 
CHECK (dados_coeficientes IS NULL OR ISJSON(dados_coeficientes) = 1); 

4 FILTROS
Recomendações de filtros no consumo (API/relatórios/SQL):
* Por nome;
* Por ativa;
* Busca textual em nome ou descrição.

5 RECORRÊNCIA DE ATUALIZAÇÃO
* Widget/API ? atualização em tempo real (transacional).
6 CAMPO CHAVE PARA ATUALIZAÇÃO
Chave primária: id (INT IDENTITY)

Chave natural (UNIQUE): nome - garante que não existam tabelas de coeficientes com nomes duplicados

Estratégia de operações:

CREATE (POST)
- Valida se nome já existe (UNIQUE constraint)
- Insere novo registro com ID auto-gerado

UPDATE (PUT)
- Identificação por id enviado na URL (/orbis/coeficientes/:id)
- Atualiza campos enviados no body
- Atualiza data_atualizacao = CURRENT_TIMESTAMP
- Valida unicidade de nome se este campo for alterado

DELETE (DELETE)
- Quando usuário excluir via widget: DELETE FROM tabelas_coeficientes WHERE id = @id
- Remove permanentemente o registro do banco
- Usado quando a tabela foi criada por engano ou não é mais necessária

DESATIVAR (PATCH)
- Quando usuário desativar via widget: UPDATE tabelas_coeficientes SET ativo = 0 WHERE id = @id
- Mantém o registro no banco com ativo = 0
- Usado quando a tabela não deve mais aparecer, mas precisa ser mantida para histórico/auditoria

1. API – DADOS DE ENTRADA

POST /orbis/coeficientes - Criar nova tabela de coeficientes
* Descrição: Cria uma tabela de coeficientes no sistema.
* Operadores disponíveis: “==”, “!=”, “>”, “<”, “>=”, “<=”, “ENTRE” (nesse caso será preenchido valormin-valormax ex:1-5 e irá validar se o número está nessa faixa).
* Body (JSON):
{
  "nome": "corte_laser",
  "descricao": "Tabela para coeficientes de corte laser chapa",
  "parametros_condicao": [
    {
      "nome": "material",
      "operador": "==",
      "tipo": "numero_decimal"
    },
    {
      "nome": "espessura_chapa",
      "operador": "==",
      "tipo": "numero_decimal"
    }
  ],
  "dados_coeficientes": [
    {
      "material": "ALUZINC",
      "espessura_chapa": "0.35",
      "coeficiente": "0.00011675840000000"
    },
    {
      "material": "ALUZINC",
      "espessura_chapa": "0.75",
      "coeficiente": "0.00004086540000000"
    },
    {
      "material": "AÇO GALVANIZADO",
      "espessura_chapa": "0.55",
      "coeficiente": "0.00003669830000000"
    }
  ],
  "tabela_sap": "Z_COEF_LASER_001",
  "ativa": true
}

* Retorno 201:
{
  "success": true,
  "data": {
    "id": 4,
    "nome": "corte_laser",
    "descricao": "Tabela para coeficientes de corte laser chapa",
    "parametros_condicao": [
      {
        "nome": "material",
        "operador": "==",
        "tipo": "numero_decimal"
      },
      {
        "nome": "espessura_chapa",
        "operador": "==",
        "tipo": "numero_decimal"
      }
    ],
    "dados_coeficientes": [
      {
        "material": "ALUZINC",
        "espessura_chapa": "0.35",
        "coeficiente": "0.00011675840000000"
      },
      {
        "material": "ALUZINC",
        "espessura_chapa": "0.75",
        "coeficiente": "0.00004086540000000"
      },
      {
        "material": "AÇO GALVANIZADO",
        "espessura_chapa": "0.55",
        "coeficiente": "0.00003669830000000"
      }
    ],
    "tabela_sap": "Z_COEF_LASER_001",
    "ativa": true,
    "data_criacao": "2025-10-09T14:30:00Z",
    "data_modificacao": "2025-10-09T14:30:00Z"
  }
}
 

PUT /orbis/coeficientes/:id - Atualizar tabela de coeficientes
* Descrição: Atualiza dados de uma tabela de coeficientes existente identificada pelo ID
* URL Parameter: id (Obrigatório)
* Body (JSON):
{
  "descricao": "Tabela para coeficientes de corte laser chapa (atualizada)",
   "parametros_condicao": [
      {
        "nome": "material",
        "operador": "==",
        "tipo": "numero_decimal"
      },
]
  "dados_coeficientes": [
    {
      "material": "ALUZINC",
      "espessura_chapa": "0.35",
      "coeficiente": "0.00012000000000000"
    },
    {
      "material": "ALUZINC",
      "espessura_chapa": "0.75",
      "coeficiente": "0.00004500000000000"
    },
    {
      "material": "AÇO GALVANIZADO",
      "espessura_chapa": "0.55",
      "coeficiente": "0.00003800000000000"
    },
    {
      "material": "AÇO INOX",
      "espessura_chapa": "1.50",
      "coeficiente": "0.00007688760000000"
    }
  ]
}
* Retorno 200:
{
  "success": true,
  "data": {
    "id": 4,
    "nome": "corte_laser",
    "descricao": "Tabela para coeficientes de corte laser chapa (atualizada)",
     "parametros_condicao": [
    {
    "nome": "material",
    "operador": "==",
    "tipo": "numero_decimal"
    },
    ]
    "parametros_condicao": [
      {
        "nome": "material",
        "operador": "==",
        "tipo": "numero_decimal"
      },
      {
        "nome": "espessura_chapa",
        "operador": "==",
        "tipo": "numero_decimal"
      }
    ],
    "dados_coeficientes": [
      {
        "material": "ALUZINC",
        "espessura_chapa": "0.35",
        "coeficiente": "0.00012000000000000"
      },
      {
        "material": "ALUZINC",
        "espessura_chapa": "0.75",
        "coeficiente": "0.00004500000000000"
      },
      {
        "material": "AÇO GALVANIZADO",
        "espessura_chapa": "0.55",
        "coeficiente": "0.00003800000000000"
      },
      {
        "material": "AÇO INOX",
        "espessura_chapa": "1.50",
        "coeficiente": "0.00007688760000000"
      }
    ],
    "ativa": true,
    "data_criacao": "2025-10-09T14:30:00Z",
    "data_modificacao": "2025-10-09T16:20:00Z"
  }
}

* Retorno 404: {"success": false, "error": "Tabela de coeficientes não encontrada"}
* Retorno 409: {"success": false, "error": "Já existe uma tabela de coeficientes com este nome"}

PATCH /orbis/coeficientes/:id/desativar - Desativar tabela de coeficientes
* Descrição: Soft delete - marca ativo = 0 (mantém registro no banco)
* URL Parameter: id (obrigatório)
* Retorno 200:
{
  "success": true,
  "message": "Tabela de coeficientes desativada com sucesso",
  "data": {
    "id": 15,
    "ativo": false
  }
}

PATCH /orbis/coeficientes/:id/ativar - Reativar tabela de coeficientes
* Descrição: Marca ativo = 1 (reativa tabela desativada)
* URL Parameter: id (obrigatório)
* Retorno 200:
{
  "success": true,
  "message": "Tabela de coeficientes ativada com sucesso",
  "data": {
    "id": 15,
    "ativo": true
  }
}

DELETE /orbis/coeficientes/:id - Excluir tabela permanentemente
* Descrição: DELETE físico - remove registro do banco definitivamente
* URL Parameter: id (obrigatório)
* Retorno 200:
{
  "success": true,
  "message": "Tabela de coeficientes excluída permanentemente"
}
* Retorno 404: {"success": false, "error": "Tabela de coeficientes não encontrada"}

POST /orbis/coeficientes/:id/buscar - Buscar coeficiente por condições (caso não seja possível, me informar que irei resolver esse cálculo no front-end buscando a tabela por completo e fazendo isso posteriormente)
* Descrição: Busca um coeficiente específico baseado nos parâmetros fornecidos (lembrando de considerar os operadores)
* URL Parameter: id (obrigatório)
* Body (JSON):
{
  "material": "ALUZINC",
  "espessura_chapa": "0.35"
}
* Retorno 200:
{
  "success": true,
  "data": {
    "coeficiente": "0.00012000000000000",
    "condicoes": {
      "material": "ALUZINC",
      "espessura_chapa": "0.35"
    }
  }
}
* Retorno 404: {"success": false, "error": "Coeficiente não encontrado para as condições fornecidas"}

7 API – DADOS DE SAÍDA

GET /orbis/coeficientes – Listar tabelas de coeficientes
* Descrição: Retorna lista de todas as tabelas de coeficientes (com filtros opcionais de [nome, codigo, tipo, ativo, descrição])
* Parâmetros: filtros opcionais
* Retorno: coleção de tabelas de coeficientes.

GET /orbis/coeficientes/:id – Buscar tabela por ID
* Descrição: Retorna uma tabela específica pelo ID
* Retorno 200: Objeto único da tabela
* Retorno 404: {"success": false, "error": "Tabela não encontrada"}
GET /orbis/coeficientes/nome/:nome – Buscar tabela por nome
* Descrição: Retorna uma tabela específica pelo nome
* Retorno 200: Objeto único da tabela
* Retorno 404: {"success": false, "error": "Tabela não encontrada"}

2. CATEGORIZAÇÃO DO DHIVE


3. ÁREAS IMPACTADAS PELA INFORMAÇÃO
Engenharia de Processos

4. VALOR AGREGADO PARA A COMPANHIA
* Precisão: Cálculos automáticos de TPE baseados em fórmulas matemáticas validadas
* Flexibilidade: Fórmulas configuráveis sem alteração de código
* Padronização: Tempos padrão unificados para toda a empresa
* Rastreabilidade: Histórico completo de alterações em operações críticas
* Integração: Base para sistema de cálculo automatizado de custos e prazos
* Qualidade: Reduz erros de cálculo manual e inconsistências
* Migração para 3DEXPERIENCE: Remove dependência de planilhas Excel e tabelas SAP
* Otimização: Facilita análise de tempos e identificação de melhorias
5. INTEGRAÇÃO COM SISTEMA DE AUDITORIA
Todas as operações de CREATE, UPDATE, DELETE, ACTIVATE e DEACTIVATE nesta tabela DEVEM registrar logs na tabela "logs_auditoria".

1. RECEBER user_id no Body
   Todas as requisições POST, PUT, PATCH e DELETE devem receber o campo user_id:
   Body exemplo:
           {
             "nome": "...",
             "descricao": "...",
             "user_id": "eduardo.silva"  ? OBRIGATÓRIO
           }
2. CHAMAR Função de Log
   Após cada operação bem-sucedida, chamar:
           registrarLog(
             tabela: 'nome_da_tabela',
             registro_id: id_do_registro,
             operacao: 'CREATE' | 'UPDATE' | 'DELETE' | 'ACTIVATE' | 'DEACTIVATE',
             valores_anteriores: objeto_com_valores_antigos (NULL para CREATE),
             valores_novos: objeto_com_valores_novos (NULL para DELETE),
             user_id: user_id_recebido_no_body
           );
3. EXEMPLOS POR OPERAÇÃO
   CREATE (POST):
* Capturar user_id do body
* Executar INSERT na tabela
* Chamar: registrarLog('tabela', novo_id, 'CREATE', null, dados_inseridos, user_id)
   UPDATE (PUT):
*    Capturar user_id do body
*    Buscar valores anteriores: SELECT * FROM tabela WHERE id = @id
*    Executar UPDATE na tabela
*    Buscar valores novos: SELECT * FROM tabela WHERE id = @id
*    Chamar: registrarLog('tabela', id, 'UPDATE', valores_anteriores, valores_novos, user_id)
   DELETE (DELETE):
*    Capturar user_id do body
*    Buscar valores anteriores: SELECT * FROM tabela WHERE id = @id
*    Executar DELETE na tabela
*    Chamar: registrarLog('tabela', id, 'DELETE', valores_anteriores, null, user_id)
   ACTIVATE (PATCH /:id/ativar):
*    Capturar user_id do body
*    Buscar valor anterior: SELECT ativo FROM tabela WHERE id = @id
*    Executar: UPDATE tabela SET ativo = 1 WHERE id = @id
*    Chamar: registrarLog('tabela', id, 'ACTIVATE', {ativo: 0}, {ativo: 1}, user_id)
   DEACTIVATE (PATCH /:id/desativar):
*    Capturar user_id do body
*    Buscar valor anterior: SELECT ativo FROM tabela WHERE id = @id
*    Executar: UPDATE tabela SET ativo = 0 WHERE id = @id
*    Chamar: registrarLog('tabela', id, 'DEACTIVATE', {ativo: 1}, {ativo: 0}, user_id)

Elaboração de API


		

        DAPI - Document Application Programming Interface

		


