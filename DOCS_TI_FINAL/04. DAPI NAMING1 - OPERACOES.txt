1 DESCRIÇÃO
A tabela "operacoes" armazena todas as operações de fabricação disponíveis no sistema, com suas fórmulas de cálculo de tempo, configurações de centro de trabalho e regras de pós-cálculo.
Cada operação representa uma etapa específica do processo produtivo (ex.: corte laser, dobra, soldagem, pintura) com seus respectivos tempos padrão e fórmulas de cálculo.
O campo "condicoes_aplicacao" (JSON) permite definir condições que determinam quando uma operação deve ser aplicada no cálculo. Por exemplo, uma operação de "Dobra com amassamento" só será incluída se "qtd_amassado > 0". Isso elimina a necessidade de uma tabela separada e mantém toda a lógica da operação centralizada.’
* Define operações disponíveis para cada centro de trabalho
* Armazena fórmulas de cálculo de tempo (homem, máquina, preparação)
* Vincula operações a rotas de fabricação
* Define condições para aplicação da operação (filtros por parâmetros)
* Aplica regras de pós-cálculo automatizadas
* Gerencia chaves de controle para integração com sistemas ERP

2 OBJETIVO

* Centralizar todas as operações de fabricação em uma única base de dados;
* Automatizar cálculo de tempos através de fórmulas matemáticas;
* Validar aplicabilidade de operações através de condições;
* Padronizar tempos de operação (homem, máquina, preparação);
* Flexibilizar cálculos com coeficientes dinâmicos;
* Integrar com sistema de cálculo de TPE do widget ORBIS.

3 LÓGICA TÉCNICA DE AQUISIÇÃO DE DADOS
Fontes
* Interface administrativa do widget (criação/edição de parâmetros);
* Chamadas de API diretamente (criação/edição de parâmetros).
Script para criar tabela
CREATE TABLE operacoes (
    id INT IDENTITY(1,1) PRIMARY KEY,
    sequencia NVARCHAR(10) NOT NULL,
    centro_producao NVARCHAR(20) NOT NULL,
    centro_trabalho NVARCHAR(20) NOT NULL,
    chave_controle NVARCHAR(20) NOT NULL,
    chave_modelo NVARCHAR(20) NOT NULL,
    descricao NVARCHAR(MAX) NOT NULL,
    tempo_homem DECIMAL(10,3) DEFAULT 0,
    unidade_tempo_homem NVARCHAR(10) DEFAULT 'MIN',
    tempo_maquina DECIMAL(10,3) DEFAULT 0,
    unidade_tempo_maquina NVARCHAR(10) DEFAULT 'MIN',
    tempo_preparacao DECIMAL(10,3) DEFAULT 0,
    unidade_tempo_preparacao NVARCHAR(10) DEFAULT 'MIN',
    formula_tempo_homem NVARCHAR(MAX) DEFAULT 'tempo_base',
    formula_tempo_maquina NVARCHAR(MAX) DEFAULT 'tempo_base',
    formula_tempo_preparacao NVARCHAR(MAX) DEFAULT 'tempo_base',
    condicoes_aplicacao NVARCHAR(MAX) DEFAULT '[]',
    ativo BIT DEFAULT 1,
    data_criacao DATETIME2 DEFAULT GETDATE(),
    data_modificacao DATETIME2 DEFAULT GETDATE(),
    regras_pos_calculo NVARCHAR(MAX) DEFAULT '[]',
    validar_rota BIT DEFAULT 1,
    explicacao_formula_homem NVARCHAR(MAX) DEFAULT '',
    explicacao_formula_maquina NVARCHAR(MAX) DEFAULT '',
    explicacao_formula_preparacao NVARCHAR(MAX) DEFAULT ''
);

-- Índices para performance
CREATE INDEX idx_operacoes_centro_producao ON operacoes(centro_producao);
CREATE INDEX idx_operacoes_centro_trabalho ON operacoes(centro_trabalho);
CREATE INDEX idx_operacoes_ativo ON operacoes(ativo);

-- Constraint para validar JSON no campo condicoes_aplicacao
ALTER TABLE operacoes
ADD CONSTRAINT chk_operacoes_condicoes_json 
CHECK (condicoes_aplicacao IS NULL OR ISJSON(condicoes_aplicacao) = 1);

-- Constraint para validar JSON no campo regras_pos_calculo
ALTER TABLE operacoes
ADD CONSTRAINT chk_operacoes_regras_json 
CHECK (regras_pos_calculo IS NULL OR ISJSON(regras_pos_calculo) = 1);


4 FILTROS
Recomendações de filtros no consumo (API/relatórios/SQL):
* Por centro de produção
* Por centro de trabalho
* Por chave de controle
* Por chave de modelo
* Por ativo (ativo/inativo)
* Por sequência
* Busca textual em descrição

5 RECORRÊNCIA DE ATUALIZAÇÃO
* Widget/API ? atualização em tempo real (transacional).
6 CAMPO CHAVE PARA ATUALIZAÇÃO
Chave primária: id (INT IDENTITY)

Chave natural (UNIQUE): (sequencia, centro_producao, centro_trabalho) - combinação que identifica unicamente uma operação

Estratégia de operações:

CREATE (POST)
- Valida se combinação (sequencia + centro_producao + centro_trabalho) já existe (UNIQUE constraint)
- Insere novo registro com ID auto-gerado

UPDATE (PUT)
- Identificação por id enviado na URL (/orbis/operacoes/:id)
- Atualiza campos enviados no body
- Valida unicidade da chave natural se campos forem alterados

DELETE (DELETE)
- Quando usuário excluir via widget: DELETE FROM operacoes WHERE id = @id
- Remove permanentemente o registro do banco
- Usado quando a operação foi criada por engano ou não é mais necessária

DESATIVAR (PATCH)
- Quando usuário desativar via widget: UPDATE operacoes SET ativo = 0 WHERE id = @id
- Mantém o registro no banco com ativo = 0
- Usado quando a operação não deve mais aparecer, mas precisa ser mantida para histórico/auditoria
1. API – DADOS DE ENTRADA

POST /orbis/operacoes - Criar nova operação
* Descrição: Cria uma operação de fabricação no sistema.
* Body (JSON):
{
  "sequencia": "1",
  "centro_producao": "MP10",
  "centro_trabalho": "MA303",
  "chave_controle": "ZP11",
  "chave_modelo": "174",
  "descricao": "Corte laser chapa",
  "tempo_homem": 0.006,
  "unidade_tempo_homem": "MIN",
  "tempo_maquina": 0.006,
  "unidade_tempo_maquina": "MIN",
  "tempo_preparacao": 3,
  "unidade_tempo_preparacao": "MIN",
  "formula_tempo_homem": "perimetro*COEF(corte_laser)+0.014",
  "formula_tempo_maquina": "perimetro*COEF(corte_laser)+0.014",
  "formula_tempo_preparacao": "tempo_base * espessura_chapa",
  "condicoes_aplicacao": [
    {
      "parametro": "perimetro",
      "operador": ">",
      "valor": "0"
    },
    {
      "parametro": "espessura_chapa",
      "operador": ">",
      "valor": "0"
    }
  ],
  "explicacao_formula_homem": "Tempo baseado no perímetro e coeficiente de material",
  "explicacao_formula_maquina": "Tempo baseado no perímetro e coeficiente de material",
  "explicacao_formula_preparacao": "Tempo de setup proporcional à espessura",
  "regras_pos_calculo": [
    {
      "idRegraConfigurada": 2,
      "nomeRegraConfigurada": "ALTERAR_ULTIMA_OP",
      "id_regra_configurada": 2,
      "nome_regra": "ALTERAR_ULTIMA_OP"
    }
  ],
  "validar_rota": true,
  "ativo": true
}

* Retorno 201:
{
  "success": true,
  "data": {
    "id": 25,
    "sequencia": "1",
    "centro_producao": "MP10",
    "centro_trabalho": "MA303",
    "chave_controle": "ZP11",
    "chave_modelo": "174",
    "descricao": "Corte laser chapa",
    "tempo_homem": 0.006,
    "unidade_tempo_homem": "MIN",
    "tempo_maquina": 0.006,
    "unidade_tempo_maquina": "MIN",
    "tempo_preparacao": 3,
    "unidade_tempo_preparacao": "MIN",
    "formula_tempo_homem": "perimetro*COEF(corte_laser)+0.014",
    "formula_tempo_maquina": "perimetro*COEF(corte_laser)+0.014",
    "formula_tempo_preparacao": "tempo_base * espessura_chapa",
    "condicoes_aplicacao": [
      {
        "parametro": "perimetro",
        "operador": ">",
        "valor": "0"
      },
      {
        "parametro": "espessura_chapa",
        "operador": ">",
        "valor": "0"
      }
    ],
    "explicacao_formula_homem": "Tempo baseado no perímetro e coeficiente de material",
    "explicacao_formula_maquina": "Tempo baseado no perímetro e coeficiente de material",
    "explicacao_formula_preparacao": "Tempo de setup proporcional à espessura",
    "regras_pos_calculo": [
      {
        "idRegraConfigurada": 2,
        "nomeRegraConfigurada": "ALTERAR_ULTIMA_OP",
        "id_regra_configurada": 2,
        "nome_regra": "ALTERAR_ULTIMA_OP"
      }
    ],
    "validar_rota": true,
    "ativo": true,
    "data_criacao": "2025-10-09T14:30:00Z",
    "data_modificacao": "2025-10-09T14:30:00Z"
  }
}
 

PUT /orbis/operacoes /:id - Atualizar operação existente
* Descrição: Atualiza dados de uma operação existente identificada pelo ID
* URL Parameter: id (Obrigatório)
* Body (JSON):
{
  "descricao": "Corte laser chapa (atualizado)",
  "formula_tempo_homem": "perimetro*COEF(corte_laser)+0.014+(0.014*qtd_recortes_laserchapa)",
  "formula_tempo_maquina": "perimetro*COEF(corte_laser)+0.014+(0.014*qtd_recortes_laserchapa)",
  "explicacao_formula_homem": "Tempo baseado no perímetro, coeficiente e quantidade de recortes",
  "condicoes_aplicacao": [
    {
      "parametro": "perimetro",
      "operador": ">",
      "valor": "0"
    }
  ]
}
 
* Retorno 200:
{
  "success": true,
  "data": {
    "id": 25,
    "sequencia": "1",
    "centro_producao": "MP10",
    "centro_trabalho": "MA303",
    "chave_controle": "ZP11",
    "chave_modelo": "174",
    "descricao": "Corte laser chapa (atualizado)",
    "tempo_homem": 0.006,
    "unidade_tempo_homem": "MIN",
    "tempo_maquina": 0.006,
    "unidade_tempo_maquina": "MIN",
    "tempo_preparacao": 3,
    "unidade_tempo_preparacao": "MIN",
    "formula_tempo_homem": "perimetro*COEF(corte_laser)+0.014+(0.014*qtd_recortes_laserchapa)",
    "formula_tempo_maquina": "perimetro*COEF(corte_laser)+0.014+(0.014*qtd_recortes_laserchapa)",
    "formula_tempo_preparacao": "tempo_base * espessura_chapa",
    "condicoes_aplicacao": [
      {
        "parametro": "perimetro",
        "operador": ">",
        "valor": "0"
      }
    ],
    "explicacao_formula_homem": "Tempo baseado no perímetro, coeficiente e quantidade de recortes",
    "explicacao_formula_maquina": "Tempo baseado no perímetro e coeficiente de material",
    "explicacao_formula_preparacao": "Tempo de setup proporcional à espessura",
    "regras_pos_calculo": [
      {
        "idRegraConfigurada": 2,
        "nomeRegraConfigurada": "ALTERAR_ULTIMA_OP",
        "id_regra_configurada": 2,
        "nome_regra": "ALTERAR_ULTIMA_OP"
      }
    ],
    "validar_rota": true,
    "ativo": true,
    "data_criacao": "2025-10-09T14:30:00Z",
    "data_modificacao": "2025-10-09T16:45:00Z"
  }
}

* Retorno 404: {"success": false, "error": "Operação não encontrada"}
* Retorno 409: {"success": false, "error": "Já existe uma operação com esta combinação de sequencia + centro_producao + centro_trabalho"}

PATCH /orbis/operacoes/:id/desativar - Desativar operação
* Descrição: Soft delete - marca ativo = 0 (mantém registro no banco)
* URL Parameter: id (obrigatório)
* Retorno 200:
{
  "success": true,
  "message": "Operação desativada com sucesso",
  "data": {
    "id": 125,
    "ativo": false
  }
}

PATCH /orbis/operacoes/:id/ativar - Reativar operação
* Descrição: Marca ativo = 1 (reativa operação desativada)
* URL Parameter: id (obrigatório)
* Retorno 200:
{
  "success": true,
  "message": "Operação ativada com sucesso",
  "data": {
    "id": 125,
    "ativo": true
  }
}

DELETE /orbis/operacoes/:id - Excluir operação permanentemente
* Descrição: DELETE físico - remove registro do banco definitivamente
* URL Parameter: id (obrigatório)
* Retorno 200:
{
  "success": true,
  "message": "Operação excluída permanentemente"
}
* Retorno 404: {"success": false, "error": "Operação não encontrada"}

7 API – DADOS DE SAÍDA

GET /orbis/operacoes – Listar operações
* Descrição: Retorna lista de todas as operações (com filtros opcionais de [sequencia, centro_trabalho, centro_producao, categoria, ativo, descricao])
* Parâmetros: filtros opcionais
* Retorno: coleção de operações.

GET /orbis/operacoes/:id – Buscar operação por ID
* Descrição: Retorna uma operação específica pelo ID
* Retorno 200: Objeto único da operação
* Retorno 404: {"success": false, "error": "Operação não encontrada"}
GET /orbis/operacoes/centro_trabalho/:centro_trabalho– Buscar operações por centro de trabalho
* Descrição: Retorna operações de um centro de trabalho específico
* Retorno 200: Array de operações
* Retorno 404: {"success": false, "error": "Nenhuma operação encontrada para este centro"}
2. CATEGORIZAÇÃO DO DHIVE


3. ÁREAS IMPACTADAS PELA INFORMAÇÃO
Engenharia de Processos

4. VALOR AGREGADO PARA A COMPANHIA
* Precisão: Cálculos automáticos de TPE baseados em fórmulas matemáticas validadas
* Flexibilidade: Fórmulas configuráveis sem alteração de código
* Padronização: Tempos padrão unificados para toda a empresa
* Rastreabilidade: Histórico completo de alterações em operações críticas
* Integração: Base para sistema de cálculo automatizado de custos e prazos
* Qualidade: Reduz erros de cálculo manual e inconsistências
* Migração para 3DEXPERIENCE: Remove dependência de planilhas Excel e tabelas SAP
* Otimização: Facilita análise de tempos e identificação de melhorias
5. INTEGRAÇÃO COM SISTEMA DE AUDITORIA
Todas as operações de CREATE, UPDATE, DELETE, ACTIVATE e DEACTIVATE nesta tabela DEVEM registrar logs na tabela "logs_auditoria".

1. RECEBER user_id no Body
   Todas as requisições POST, PUT, PATCH e DELETE devem receber o campo user_id:
   Body exemplo:
           {
             "nome": "...",
             "descricao": "...",
             "user_id": "eduardo.silva"  ? OBRIGATÓRIO
           }
2. CHAMAR Função de Log
   Após cada operação bem-sucedida, chamar:
           registrarLog(
             tabela: 'nome_da_tabela',
             registro_id: id_do_registro,
             operacao: 'CREATE' | 'UPDATE' | 'DELETE' | 'ACTIVATE' | 'DEACTIVATE',
             valores_anteriores: objeto_com_valores_antigos (NULL para CREATE),
             valores_novos: objeto_com_valores_novos (NULL para DELETE),
             user_id: user_id_recebido_no_body
           );
3. EXEMPLOS POR OPERAÇÃO
   CREATE (POST):
* Capturar user_id do body
* Executar INSERT na tabela
* Chamar: registrarLog('tabela', novo_id, 'CREATE', null, dados_inseridos, user_id)
   UPDATE (PUT):
*    Capturar user_id do body
*    Buscar valores anteriores: SELECT * FROM tabela WHERE id = @id
*    Executar UPDATE na tabela
*    Buscar valores novos: SELECT * FROM tabela WHERE id = @id
*    Chamar: registrarLog('tabela', id, 'UPDATE', valores_anteriores, valores_novos, user_id)
   DELETE (DELETE):
*    Capturar user_id do body
*    Buscar valores anteriores: SELECT * FROM tabela WHERE id = @id
*    Executar DELETE na tabela
*    Chamar: registrarLog('tabela', id, 'DELETE', valores_anteriores, null, user_id)
   ACTIVATE (PATCH /:id/ativar):
*    Capturar user_id do body
*    Buscar valor anterior: SELECT ativo FROM tabela WHERE id = @id
*    Executar: UPDATE tabela SET ativo = 1 WHERE id = @id
*    Chamar: registrarLog('tabela', id, 'ACTIVATE', {ativo: 0}, {ativo: 1}, user_id)
   DEACTIVATE (PATCH /:id/desativar):
*    Capturar user_id do body
*    Buscar valor anterior: SELECT ativo FROM tabela WHERE id = @id
*    Executar: UPDATE tabela SET ativo = 0 WHERE id = @id
*    Chamar: registrarLog('tabela', id, 'DEACTIVATE', {ativo: 1}, {ativo: 0}, user_id)

Elaboração de API


		

        DAPI - Document Application Programming Interface

		


